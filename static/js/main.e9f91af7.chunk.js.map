{"version":3,"sources":["component/input.js","component/text.js","App.js","serviceWorker.js","index.js"],"names":["Input","props","type","value","inputValue","onChange","e","talkInput","onClick","alertInput","Text","state","handleHi","alert","a","target","setState","console","log","this","Component","App","className","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"6KAeeA,EAbD,SAAAC,GACZ,OACE,6BACE,2BACEC,KAAK,OACLC,MAAOF,EAAMG,WACbC,SAAU,SAAAC,GAAC,OAAIL,EAAMM,UAAUD,MAEjC,4BAAQE,QAASP,EAAMQ,YAAvB,iDC0BSC,E,2MAhCbC,MAAQ,CACNP,WAAY,I,EAGdQ,SAAW,WACTC,MAAM,sD,EAGRN,UAAY,SAAAD,GACV,IAAIQ,EAAIR,EAAES,OAAOZ,MACjB,EAAKa,SAAS,CAAEZ,WAAYU,K,EAG9BL,WAAa,WACXI,MAAM,EAAKF,MAAMP,WAAa,wB,wEAK9B,OADAa,QAAQC,IAAI,oCAAYC,KAAKR,OAE3B,6BACE,4BAAQH,QAASW,KAAKP,UAAtB,kCACA,kBAAC,EAAD,CACEL,UAAWY,KAAKZ,UAChBH,WAAYe,KAAKR,MAAMP,WACvBK,WAAYU,KAAKV,kB,GA1BRW,aCSJC,MATf,WACE,OACE,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAAlB,aACA,kBAAC,EAAD,QCKcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD8H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLtB,QAAQsB,MAAMA,EAAMC,a","file":"static/js/main.e9f91af7.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Input = props => {\n  return (\n    <div>\n      <input\n        type=\"text\"\n        value={props.inputValue}\n        onChange={e => props.talkInput(e)}\n      ></input>\n      <button onClick={props.alertInput}>말해라 인풋값을</button>\n    </div>\n  );\n};\n\nexport default Input;\n","import React, { Component } from \"react\";\nimport Input from \"./input\";\n\nclass Text extends Component {\n  state = {\n    inputValue: \"\"\n  };\n\n  handleHi = () => {\n    alert(\"안녕하세요다 인마\");\n  };\n\n  talkInput = e => {\n    let a = e.target.value;\n    this.setState({ inputValue: a });\n  };\n\n  alertInput = () => {\n    alert(this.state.inputValue + \"다 인마\");\n  };\n\n  render() {\n    console.log(\"이스테이트 : \", this.state);\n    return (\n      <div>\n        <button onClick={this.handleHi}>안녕하세요</button>\n        <Input\n          talkInput={this.talkInput}\n          inputValue={this.state.inputValue}\n          alertInput={this.alertInput}\n        />\n      </div>\n    );\n  }\n}\n\nexport default Text;\n","import React from \"react\";\nimport Text from \"./component/text\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">helloword</header>\n      <Text />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\nserviceWorker.unregister();\n"],"sourceRoot":""}